digraph G {

    // Attributes
    graph [ overlap = "scalexy", fontname = "Verdana", fontsize = "7", fontcolor = "#0000007f", label = "Generated by Python Call Graph v1.0.1\nhttp://pycallgraph.slowchop.com" ];
    node [ fontname = "Verdana", fontsize = "7", fontcolor = "#000000ff", style = "filled", shape = "rect" ];
    edge [ fontname = "Verdana", fontsize = "7", fontcolor = "#000000ff" ];

    // Groups
    subgraph "cluster___main__" { "__main__"; label = "__main__"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_<module>" { "<module>"; label = "<module>"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__find_and_load" { "_find_and_load"; label = "_find_and_load"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__ModuleLockManager" { "_ModuleLockManager.__init__" "_ModuleLockManager.__enter__" "_ModuleLockManager.__exit__"; label = "_ModuleLockManager"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__get_module_lock" { "_get_module_lock"; label = "_get_module_lock"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__ModuleLock" { "_ModuleLock.__init__" "_ModuleLock.acquire" "_ModuleLock.release"; label = "_ModuleLock"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__find_and_load_unlocked" { "_find_and_load_unlocked"; label = "_find_and_load_unlocked"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__find_spec" { "_find_spec"; label = "_find_spec"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__ImportLockContext" { "_ImportLockContext.__enter__" "_ImportLockContext.__exit__"; label = "_ImportLockContext"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_find_spec" { "find_spec"; label = "find_spec"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__get_spec" { "_get_spec"; label = "_get_spec"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__path_importer_cache" { "_path_importer_cache"; label = "_path_importer_cache"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_FileFinder" { "FileFinder.find_spec"; label = "FileFinder"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__load_unlocked" { "_load_unlocked"; label = "_load_unlocked"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_module_from_spec" { "module_from_spec"; label = "module_from_spec"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_SourceFileLoader" { "SourceFileLoader.create_module" "SourceFileLoader.exec_module" "SourceFileLoader.get_code" "SourceFileLoader._check_name_wrapper" "SourceFileLoader.path_stats" "SourceFileLoader.get_data"; label = "SourceFileLoader"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__new_module" { "_new_module"; label = "_new_module"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__init_module_attrs" { "_init_module_attrs"; label = "_init_module_attrs"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_ModuleSpec" { "ModuleSpec.parent" "ModuleSpec.has_location" "ModuleSpec.cached"; label = "ModuleSpec"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__installed_safely" { "_installed_safely.__init__" "_installed_safely.__enter__" "_installed_safely.__exit__"; label = "_installed_safely"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_cache_from_source" { "cache_from_source"; label = "cache_from_source"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__classify_pyc" { "_classify_pyc"; label = "_classify_pyc"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__validate_timestamp_pyc" { "_validate_timestamp_pyc"; label = "_validate_timestamp_pyc"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__verbose_message" { "_verbose_message"; label = "_verbose_message"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__compile_bytecode" { "_compile_bytecode"; label = "_compile_bytecode"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__call_with_frames_removed" { "_call_with_frames_removed"; label = "_call_with_frames_removed"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_numpy" { "numpy.<module>" "numpy.testing._private.<module>" "numpy.lib.shape_base._kron_dispatcher" "numpy.lib.shape_base.kron" "numpy.core._asarray.asanyarray" "numpy.core.numeric._outer_dispatcher" "numpy.core.numeric.outer" "numpy.core.multiarray.concatenate" "numpy.lib.shape_base.get_array_prepare" "numpy.lib.shape_base.<genexpr>" "numpy.lib.shape_base.get_array_wrap" "numpy.core.numeric.binary_repr" "numpy.core.numeric.warn_if_insufficient" "numpy.core.fromnumeric._trace_dispatcher" "numpy.core.fromnumeric.trace" "numpy.linalg.linalg._unary_dispatcher" "numpy.linalg.linalg.inv" "numpy.linalg.linalg._makearray" "numpy.core._asarray.asarray" "numpy.linalg.linalg._assertRankAtLeast2" "numpy.linalg.linalg._assertNdSquareness" "numpy.linalg.linalg._commonType" "numpy.linalg.linalg.isComplexType" "numpy.linalg.linalg._realType" "numpy.linalg.linalg.get_linalg_error_extobj" "numpy.lib.type_check._real_dispatcher" "numpy.lib.type_check.real" "numpy.core.numeric.identity" "numpy.lib.twodim_base.eye" "numpy.linalg.linalg.eig" "numpy.linalg.linalg._assertFinite" "numpy.core._methods._all" "numpy.linalg.linalg._complexType" "numpy.ma.core.isMaskedArray" "numpy.lib.function_base.asarray_chkfinite" "numpy.core.numerictypes.issubdtype" "numpy.core.numerictypes.issubclass_" "numpy.lib.type_check._is_type_dispatcher" "numpy.lib.type_check.isrealobj" "numpy.lib.twodim_base._trilu_dispatcher" "numpy.lib.twodim_base.triu" "numpy.lib.twodim_base.tri" "numpy.core.numeric._array_equal_dispatcher" "numpy.core.numeric.array_equal" "numpy.lib.twodim_base._diag_dispatcher" "numpy.lib.twodim_base.diag" "numpy.core.fromnumeric._amin_dispatcher" "numpy.core.fromnumeric.amin"; label = "numpy"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_<genexpr>" { "<genexpr>"; label = "<genexpr>"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_cb" { "cb"; label = "cb"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__handle_fromlist" { "_handle_fromlist"; label = "_handle_fromlist"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_scipy" { "scipy.linalg.<module>" "scipy.linalg._matfuncs_sqrtm.sqrtm" "scipy._lib._util._asarray_validated" "scipy.sparse.base.isspmatrix" "scipy.linalg.decomp_schur.schur" "scipy.linalg.misc._datacopied" "scipy.linalg.lapack.get_lapack_funcs" "scipy.linalg.blas._get_funcs" "scipy.linalg._matfuncs_sqrtm._sqrtm_triu"; label = "scipy"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_matplotlib" { "matplotlib.pyplot.<module>"; label = "matplotlib"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__NamespacePath" { "_NamespacePath.__iter__"; label = "_NamespacePath"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_mpl_toolkits" { "mpl_toolkits.mplot3d.<module>"; label = "mpl_toolkits"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_makeSU2Bases" { "makeSU2Bases"; label = "makeSU2Bases"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_<listcomp>" { "<listcomp>"; label = "<listcomp>"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_kron" { "kron"; label = "kron"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_outer" { "outer"; label = "outer"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_concatenate" { "concatenate"; label = "concatenate"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_makeBases" { "makeBases"; label = "makeBases"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_makeMMatrix" { "makeMMatrix"; label = "makeMMatrix"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_makeBMatrix" { "makeBMatrix"; label = "makeBMatrix"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_trace" { "trace"; label = "trace"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_warnings" { "warnings.WarningMessage.__init__" "warnings._showwarnmsg" "warnings._showwarnmsg_impl" "warnings._formatwarnmsg" "warnings._formatwarnmsg_impl"; label = "warnings"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_inv" { "inv"; label = "inv"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_doIterativeSimulation" { "doIterativeSimulation"; label = "doIterativeSimulation"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_getExperimentalData" { "getExperimentalData"; label = "getExperimentalData"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster__bootlocale" { "_bootlocale.getpreferredencoding"; label = "_bootlocale"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_codecs" { "codecs.IncrementalDecoder.__init__" "codecs.IncrementalDecoder.decode" "codecs.IncrementalEncoder.__init__"; label = "codecs"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_doIterativeAlgorithm" { "doIterativeAlgorithm"; label = "doIterativeAlgorithm"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_makeInitialDensityMatrix" { "makeInitialDensityMatrix"; label = "makeInitialDensityMatrix"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_choleskyDecomposition" { "choleskyDecomposition"; label = "choleskyDecomposition"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_real" { "real"; label = "real"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_eig" { "eig"; label = "eig"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_calculateFidelity" { "calculateFidelity"; label = "calculateFidelity"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_isrealobj" { "isrealobj"; label = "isrealobj"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_iscomplexobj" { "iscomplexobj"; label = "iscomplexobj"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_triu" { "triu"; label = "triu"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_where" { "where"; label = "where"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_array_equal" { "array_equal"; label = "array_equal"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_diag" { "diag"; label = "diag"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }
    subgraph "cluster_amin" { "amin"; label = "amin"; fontsize = "10"; fontcolor = "black"; style = "bold"; color="#000000cc"; }

    // Nodes
    "__main__" [color = "#e5e5e5ff", label = "__main__\ncalls: 1\ntime: 0.000000s"];
    "<module>" [color = "#e54ce5ff", label = "<module>\ncalls: 1\ntime: 197.931245s"];
    "_find_and_load" [color = "#e3e5e5ff", label = "_find_and_load\ncalls: 8\ntime: 2.678011s"];
    "_ModuleLockManager.__init__" [color = "#e5e5e5ff", label = "_ModuleLockManager.__init__\ncalls: 8\ntime: 0.000020s"];
    "_ModuleLockManager.__enter__" [color = "#e5e5e5ff", label = "_ModuleLockManager.__enter__\ncalls: 8\ntime: 0.000944s"];
    "_get_module_lock" [color = "#e5e5e5ff", label = "_get_module_lock\ncalls: 8\ntime: 0.000359s"];
    "_ModuleLock.__init__" [color = "#e5e5e5ff", label = "_ModuleLock.__init__\ncalls: 6\ntime: 0.000030s"];
    "_ModuleLock.acquire" [color = "#e5e5e5ff", label = "_ModuleLock.acquire\ncalls: 8\ntime: 0.000098s"];
    "_find_and_load_unlocked" [color = "#e3e5e5ff", label = "_find_and_load_unlocked\ncalls: 8\ntime: 2.675972s"];
    "_find_spec" [color = "#e5e5e5ff", label = "_find_spec\ncalls: 8\ntime: 0.013220s"];
    "_ImportLockContext.__enter__" [color = "#e5e5e5ff", label = "_ImportLockContext.__enter__\ncalls: 18\ntime: 0.000032s"];
    "find_spec" [color = "#e5e5e5ff", label = "find_spec\ncalls: 18\ntime: 0.010216s"];
    "_ImportLockContext.__exit__" [color = "#e5e5e5ff", label = "_ImportLockContext.__exit__\ncalls: 18\ntime: 0.000036s"];
    "_get_spec" [color = "#e5e5e5ff", label = "_get_spec\ncalls: 5\ntime: 0.009599s"];
    "_path_importer_cache" [color = "#e5e5e5ff", label = "_path_importer_cache\ncalls: 13\ntime: 0.001662s"];
    "FileFinder.find_spec" [color = "#e5e5e5ff", label = "FileFinder.find_spec\ncalls: 11\ntime: 0.003633s"];
    "_load_unlocked" [color = "#e3e5e5ff", label = "_load_unlocked\ncalls: 8\ntime: 2.334123s"];
    "module_from_spec" [color = "#e5e5e5ff", label = "module_from_spec\ncalls: 6\ntime: 0.002602s"];
    "SourceFileLoader.create_module" [color = "#e5e5e5ff", label = "SourceFileLoader.create_module\ncalls: 5\ntime: 0.000008s"];
    "_new_module" [color = "#e5e5e5ff", label = "_new_module\ncalls: 5\ntime: 0.000013s"];
    "_init_module_attrs" [color = "#e5e5e5ff", label = "_init_module_attrs\ncalls: 5\ntime: 0.001818s"];
    "ModuleSpec.parent" [color = "#e5e5e5ff", label = "ModuleSpec.parent\ncalls: 5\ntime: 0.000013s"];
    "ModuleSpec.has_location" [color = "#e5e5e5ff", label = "ModuleSpec.has_location\ncalls: 5\ntime: 0.000009s"];
    "ModuleSpec.cached" [color = "#e5e5e5ff", label = "ModuleSpec.cached\ncalls: 10\ntime: 0.000998s"];
    "_installed_safely.__init__" [color = "#e5e5e5ff", label = "_installed_safely.__init__\ncalls: 6\ntime: 0.000015s"];
    "_installed_safely.__enter__" [color = "#e5e5e5ff", label = "_installed_safely.__enter__\ncalls: 6\ntime: 0.000016s"];
    "SourceFileLoader.exec_module" [color = "#e3e5e5ff", label = "SourceFileLoader.exec_module\ncalls: 6\ntime: 2.003968s"];
    "SourceFileLoader.get_code" [color = "#e5e5e5ff", label = "SourceFileLoader.get_code\ncalls: 5\ntime: 0.005138s"];
    "SourceFileLoader._check_name_wrapper" [color = "#e5e5e5ff", label = "SourceFileLoader._check_name_wrapper\ncalls: 5\ntime: 0.000214s"];
    "cache_from_source" [color = "#e5e5e5ff", label = "cache_from_source\ncalls: 5\ntime: 0.000158s"];
    "SourceFileLoader.path_stats" [color = "#e5e5e5ff", label = "SourceFileLoader.path_stats\ncalls: 5\ntime: 0.000059s"];
    "SourceFileLoader.get_data" [color = "#e5e5e5ff", label = "SourceFileLoader.get_data\ncalls: 5\ntime: 0.002098s"];
    "_classify_pyc" [color = "#e5e5e5ff", label = "_classify_pyc\ncalls: 5\ntime: 0.000257s"];
    "_validate_timestamp_pyc" [color = "#e5e5e5ff", label = "_validate_timestamp_pyc\ncalls: 5\ntime: 0.000059s"];
    "_verbose_message" [color = "#e5e5e5ff", label = "_verbose_message\ncalls: 10\ntime: 0.000069s"];
    "_compile_bytecode" [color = "#e5e5e5ff", label = "_compile_bytecode\ncalls: 5\ntime: 0.000541s"];
    "_call_with_frames_removed" [color = "#e3e5e5ff", label = "_call_with_frames_removed\ncalls: 8\ntime: 2.327025s"];
    "numpy.<module>" [color = "#e5e5e5ff", label = "numpy.<module>\ncalls: 1\ntime: 0.521819s"];
    "_installed_safely.__exit__" [color = "#e5e5e5ff", label = "_installed_safely.__exit__\ncalls: 6\ntime: 0.000296s"];
    "<genexpr>" [color = "#e5e5e5ff", label = "<genexpr>\ncalls: 20\ntime: 0.000033s"];
    "_ModuleLockManager.__exit__" [color = "#e5e5e5ff", label = "_ModuleLockManager.__exit__\ncalls: 8\ntime: 0.000129s"];
    "_ModuleLock.release" [color = "#e5e5e5ff", label = "_ModuleLock.release\ncalls: 8\ntime: 0.000058s"];
    "cb" [color = "#e5e5e5ff", label = "cb\ncalls: 8\ntime: 0.000036s"];
    "_handle_fromlist" [color = "#e5e5e5ff", label = "_handle_fromlist\ncalls: 13,570\ntime: 0.116785s"];
    "scipy.linalg.<module>" [color = "#e5e5e5ff", label = "scipy.linalg.<module>\ncalls: 1\ntime: 0.104017s"];
    "numpy.testing._private.<module>" [color = "#e5e5e5ff", label = "numpy.testing._private.<module>\ncalls: 1\ntime: 0.000002s"];
    "matplotlib.pyplot.<module>" [color = "#e4e5e5ff", label = "matplotlib.pyplot.<module>\ncalls: 1\ntime: 1.357863s"];
    "_NamespacePath.__iter__" [color = "#e5e5e5ff", label = "_NamespacePath.__iter__\ncalls: 1\ntime: 0.002742s"];
    "mpl_toolkits.mplot3d.<module>" [color = "#e5e5e5ff", label = "mpl_toolkits.mplot3d.<module>\ncalls: 1\ntime: 0.009838s"];
    "makeSU2Bases" [color = "#e5e5e5ff", label = "makeSU2Bases\ncalls: 1\ntime: 0.112519s"];
    "<listcomp>" [color = "#d058e5ff", label = "<listcomp>\ncalls: 34,336\ntime: 182.011408s"];
    "kron" [color = "#e5e5e5ff", label = "kron\ncalls: 672\ntime: 0.183473s"];
    "numpy.lib.shape_base._kron_dispatcher" [color = "#e5e5e5ff", label = "numpy.lib.shape_base._kron_dispatcher\ncalls: 672\ntime: 0.001369s"];
    "numpy.lib.shape_base.kron" [color = "#e5e5e5ff", label = "numpy.lib.shape_base.kron\ncalls: 672\ntime: 0.170321s"];
    "numpy.core._asarray.asanyarray" [color = "#9993e5ff", label = "numpy.core._asarray.asanyarray\ncalls: 3,545,377\ntime: 6.855991s"];
    "outer" [color = "#e5e5e5ff", label = "outer\ncalls: 672\ntime: 0.038869s"];
    "numpy.core.numeric._outer_dispatcher" [color = "#e5e5e5ff", label = "numpy.core.numeric._outer_dispatcher\ncalls: 672\ntime: 0.001239s"];
    "numpy.core.numeric.outer" [color = "#e5e5e5ff", label = "numpy.core.numeric.outer\ncalls: 672\ntime: 0.022486s"];
    "concatenate" [color = "#e5e5e5ff", label = "concatenate\ncalls: 1,344\ntime: 0.025744s"];
    "numpy.core.multiarray.concatenate" [color = "#e5e5e5ff", label = "numpy.core.multiarray.concatenate\ncalls: 1,344\ntime: 0.002777s"];
    "numpy.lib.shape_base.get_array_prepare" [color = "#e5e5e5ff", label = "numpy.lib.shape_base.get_array_prepare\ncalls: 672\ntime: 0.024878s"];
    "numpy.lib.shape_base.<genexpr>" [color = "#e5e5e5ff", label = "numpy.lib.shape_base.<genexpr>\ncalls: 4,032\ntime: 0.010871s"];
    "numpy.lib.shape_base.get_array_wrap" [color = "#e5e5e5ff", label = "numpy.lib.shape_base.get_array_wrap\ncalls: 672\ntime: 0.020504s"];
    "makeBases" [color = "#e5e5e5ff", label = "makeBases\ncalls: 1\ntime: 0.083791s"];
    "numpy.core.numeric.binary_repr" [color = "#e5e5e5ff", label = "numpy.core.numeric.binary_repr\ncalls: 4\ntime: 0.000082s"];
    "numpy.core.numeric.warn_if_insufficient" [color = "#e5e5e5ff", label = "numpy.core.numeric.warn_if_insufficient\ncalls: 3\ntime: 0.000006s"];
    "makeMMatrix" [color = "#e2e5e5ff", label = "makeMMatrix\ncalls: 1\ntime: 3.452190s"];
    "makeBMatrix" [color = "#e3e5e5ff", label = "makeBMatrix\ncalls: 1\ntime: 3.198517s"];
    "trace" [color = "#e53ec5ff", label = "trace\ncalls: 3,544,960\ntime: 117.718472s"];
    "numpy.core.fromnumeric._trace_dispatcher" [color = "#9994e5ff", label = "numpy.core.fromnumeric._trace_dispatcher\ncalls: 3,544,960\ntime: 6.426977s"];
    "numpy.core.fromnumeric.trace" [color = "#ae70e5ff", label = "numpy.core.fromnumeric.trace\ncalls: 3,544,960\ntime: 52.749646s"];
    "warnings.WarningMessage.__init__" [color = "#e5e5e5ff", label = "warnings.WarningMessage.__init__\ncalls: 1\ntime: 0.000009s"];
    "warnings._showwarnmsg" [color = "#e5e5e5ff", label = "warnings._showwarnmsg\ncalls: 1\ntime: 0.000942s"];
    "warnings._showwarnmsg_impl" [color = "#e5e5e5ff", label = "warnings._showwarnmsg_impl\ncalls: 1\ntime: 0.000914s"];
    "warnings._formatwarnmsg" [color = "#e5e5e5ff", label = "warnings._formatwarnmsg\ncalls: 1\ntime: 0.000371s"];
    "warnings._formatwarnmsg_impl" [color = "#e5e5e5ff", label = "warnings._formatwarnmsg_impl\ncalls: 1\ntime: 0.000344s"];
    "inv" [color = "#e4e5e5ff", label = "inv\ncalls: 6,783\ntime: 1.169390s"];
    "numpy.linalg.linalg._unary_dispatcher" [color = "#e5e5e5ff", label = "numpy.linalg.linalg._unary_dispatcher\ncalls: 13,565\ntime: 0.026150s"];
    "numpy.linalg.linalg.inv" [color = "#e4e5e5ff", label = "numpy.linalg.linalg.inv\ncalls: 6,783\ntime: 0.989656s"];
    "numpy.linalg.linalg._makearray" [color = "#e5e5e5ff", label = "numpy.linalg.linalg._makearray\ncalls: 13,565\ntime: 0.178605s"];
    "numpy.core._asarray.asarray" [color = "#e5e5e5ff", label = "numpy.core._asarray.asarray\ncalls: 13,577\ntime: 0.030705s"];
    "numpy.linalg.linalg._assertRankAtLeast2" [color = "#e5e5e5ff", label = "numpy.linalg.linalg._assertRankAtLeast2\ncalls: 13,565\ntime: 0.048008s"];
    "numpy.linalg.linalg._assertNdSquareness" [color = "#e5e5e5ff", label = "numpy.linalg.linalg._assertNdSquareness\ncalls: 13,565\ntime: 0.068071s"];
    "numpy.linalg.linalg._commonType" [color = "#e4e5e5ff", label = "numpy.linalg.linalg._commonType\ncalls: 13,565\ntime: 0.425279s"];
    "numpy.linalg.linalg.isComplexType" [color = "#e4e5e5ff", label = "numpy.linalg.linalg.isComplexType\ncalls: 33,912\ntime: 0.062753s"];
    "numpy.linalg.linalg._realType" [color = "#e5e5e5ff", label = "numpy.linalg.linalg._realType\ncalls: 13,565\ntime: 0.029726s"];
    "numpy.linalg.linalg.get_linalg_error_extobj" [color = "#e5e5e5ff", label = "numpy.linalg.linalg.get_linalg_error_extobj\ncalls: 13,565\ntime: 0.048020s"];
    "doIterativeSimulation" [color = "#dc51e5ff", label = "doIterativeSimulation\ncalls: 1\ntime: 191.928763s"];
    "getExperimentalData" [color = "#e5e5e5ff", label = "getExperimentalData\ncalls: 1\ntime: 0.000439s"];
    "_bootlocale.getpreferredencoding" [color = "#e5e5e5ff", label = "_bootlocale.getpreferredencoding\ncalls: 3\ntime: 0.000037s"];
    "codecs.IncrementalDecoder.__init__" [color = "#e5e5e5ff", label = "codecs.IncrementalDecoder.__init__\ncalls: 2\ntime: 0.000017s"];
    "codecs.IncrementalDecoder.decode" [color = "#e5e5e5ff", label = "codecs.IncrementalDecoder.decode\ncalls: 2\ntime: 0.000014s"];
    "doIterativeAlgorithm" [color = "#dc51e5ff", label = "doIterativeAlgorithm\ncalls: 1\ntime: 191.879303s"];
    "makeInitialDensityMatrix" [color = "#e5e5e5ff", label = "makeInitialDensityMatrix\ncalls: 1\ntime: 0.018283s"];
    "choleskyDecomposition" [color = "#e5e5e5ff", label = "choleskyDecomposition\ncalls: 1\ntime: 0.004111s"];
    "real" [color = "#e5e5e5ff", label = "real\ncalls: 6,799\ntime: 0.190803s"];
    "numpy.lib.type_check._real_dispatcher" [color = "#e5e5e5ff", label = "numpy.lib.type_check._real_dispatcher\ncalls: 6,799\ntime: 0.013489s"];
    "numpy.lib.type_check.real" [color = "#e5e5e5ff", label = "numpy.lib.type_check.real\ncalls: 6,799\ntime: 0.021023s"];
    "numpy.core.numeric.identity" [color = "#e4e5e5ff", label = "numpy.core.numeric.identity\ncalls: 13,564\ntime: 0.611090s"];
    "numpy.lib.twodim_base.eye" [color = "#e5e5e5ff", label = "numpy.lib.twodim_base.eye\ncalls: 13,564\ntime: 0.202132s"];
    "eig" [color = "#e3e5e5ff", label = "eig\ncalls: 6,782\ntime: 2.062936s"];
    "numpy.linalg.linalg.eig" [color = "#e3e5e5ff", label = "numpy.linalg.linalg.eig\ncalls: 6,782\ntime: 1.912563s"];
    "numpy.linalg.linalg._assertFinite" [color = "#e5e5e5ff", label = "numpy.linalg.linalg._assertFinite\ncalls: 6,782\ntime: 0.151525s"];
    "numpy.core._methods._all" [color = "#e5e5e5ff", label = "numpy.core._methods._all\ncalls: 6,790\ntime: 0.052874s"];
    "numpy.linalg.linalg._complexType" [color = "#e5e5e5ff", label = "numpy.linalg.linalg._complexType\ncalls: 6,782\ntime: 0.014391s"];
    "calculateFidelity" [color = "#e5e5e5ff", label = "calculateFidelity\ncalls: 1\ntime: 0.032328s"];
    "scipy.linalg._matfuncs_sqrtm.sqrtm" [color = "#e5e5e5ff", label = "scipy.linalg._matfuncs_sqrtm.sqrtm\ncalls: 3\ntime: 0.031988s"];
    "scipy._lib._util._asarray_validated" [color = "#e5e5e5ff", label = "scipy._lib._util._asarray_validated\ncalls: 3\ntime: 0.000565s"];
    "scipy.sparse.base.isspmatrix" [color = "#e5e5e5ff", label = "scipy.sparse.base.isspmatrix\ncalls: 3\ntime: 0.000010s"];
    "numpy.ma.core.isMaskedArray" [color = "#e5e5e5ff", label = "numpy.ma.core.isMaskedArray\ncalls: 3\ntime: 0.000007s"];
    "numpy.lib.function_base.asarray_chkfinite" [color = "#e5e5e5ff", label = "numpy.lib.function_base.asarray_chkfinite\ncalls: 6\ntime: 0.000236s"];
    "numpy.core.numerictypes.issubdtype" [color = "#e5e5e5ff", label = "numpy.core.numerictypes.issubdtype\ncalls: 3\ntime: 0.000103s"];
    "numpy.core.numerictypes.issubclass_" [color = "#e5e5e5ff", label = "numpy.core.numerictypes.issubclass_\ncalls: 6\ntime: 0.000027s"];
    "isrealobj" [color = "#e5e5e5ff", label = "isrealobj\ncalls: 6\ntime: 0.000913s"];
    "numpy.lib.type_check._is_type_dispatcher" [color = "#e5e5e5ff", label = "numpy.lib.type_check._is_type_dispatcher\ncalls: 6\ntime: 0.000011s"];
    "numpy.lib.type_check.isrealobj" [color = "#e5e5e5ff", label = "numpy.lib.type_check.isrealobj\ncalls: 6\ntime: 0.000733s"];
    "iscomplexobj" [color = "#e5e5e5ff", label = "iscomplexobj\ncalls: 3\ntime: 0.000074s"];
    "scipy.linalg.decomp_schur.schur" [color = "#e5e5e5ff", label = "scipy.linalg.decomp_schur.schur\ncalls: 3\ntime: 0.015152s"];
    "scipy.linalg.misc._datacopied" [color = "#e5e5e5ff", label = "scipy.linalg.misc._datacopied\ncalls: 3\ntime: 0.000008s"];
    "scipy.linalg.lapack.get_lapack_funcs" [color = "#e5e5e5ff", label = "scipy.linalg.lapack.get_lapack_funcs\ncalls: 3\ntime: 0.000862s"];
    "scipy.linalg.blas._get_funcs" [color = "#e5e5e5ff", label = "scipy.linalg.blas._get_funcs\ncalls: 3\ntime: 0.000733s"];
    "triu" [color = "#e5e5e5ff", label = "triu\ncalls: 2\ntime: 0.001157s"];
    "numpy.lib.twodim_base._trilu_dispatcher" [color = "#e5e5e5ff", label = "numpy.lib.twodim_base._trilu_dispatcher\ncalls: 2\ntime: 0.000005s"];
    "numpy.lib.twodim_base.triu" [color = "#e5e5e5ff", label = "numpy.lib.twodim_base.triu\ncalls: 2\ntime: 0.001000s"];
    "numpy.lib.twodim_base.tri" [color = "#e5e5e5ff", label = "numpy.lib.twodim_base.tri\ncalls: 2\ntime: 0.000184s"];
    "where" [color = "#e5e5e5ff", label = "where\ncalls: 2\ntime: 0.000054s"];
    "array_equal" [color = "#e5e5e5ff", label = "array_equal\ncalls: 2\ntime: 0.000199s"];
    "numpy.core.numeric._array_equal_dispatcher" [color = "#e5e5e5ff", label = "numpy.core.numeric._array_equal_dispatcher\ncalls: 2\ntime: 0.000004s"];
    "numpy.core.numeric.array_equal" [color = "#e5e5e5ff", label = "numpy.core.numeric.array_equal\ncalls: 2\ntime: 0.000115s"];
    "scipy.linalg._matfuncs_sqrtm._sqrtm_triu" [color = "#e5e5e5ff", label = "scipy.linalg._matfuncs_sqrtm._sqrtm_triu\ncalls: 3\ntime: 0.010760s"];
    "diag" [color = "#e5e5e5ff", label = "diag\ncalls: 6\ntime: 0.001050s"];
    "numpy.lib.twodim_base._diag_dispatcher" [color = "#e5e5e5ff", label = "numpy.lib.twodim_base._diag_dispatcher\ncalls: 6\ntime: 0.000012s"];
    "numpy.lib.twodim_base.diag" [color = "#e5e5e5ff", label = "numpy.lib.twodim_base.diag\ncalls: 6\ntime: 0.000883s"];
    "amin" [color = "#e5e5e5ff", label = "amin\ncalls: 2\ntime: 0.000152s"];
    "numpy.core.fromnumeric._amin_dispatcher" [color = "#e5e5e5ff", label = "numpy.core.fromnumeric._amin_dispatcher\ncalls: 2\ntime: 0.000005s"];
    "numpy.core.fromnumeric.amin" [color = "#e5e5e5ff", label = "numpy.core.fromnumeric.amin\ncalls: 2\ntime: 0.000062s"];
    "codecs.IncrementalEncoder.__init__" [color = "#e5e5e5ff", label = "codecs.IncrementalEncoder.__init__\ncalls: 2\ntime: 0.000008s"];

    // Edges
    "__main__" -> "<module>" [color = "#b23bb2ff", label = "1"];
    "<module>" -> "_find_and_load" [color = "#b0b2b2ff", label = "5"];
    "<module>" -> "_handle_fromlist" [color = "#b2b2b2ff", label = "6"];
    "<module>" -> "makeSU2Bases" [color = "#b2b2b2ff", label = "1"];
    "<module>" -> "makeBases" [color = "#b2b2b2ff", label = "1"];
    "<module>" -> "makeMMatrix" [color = "#b0b2b2ff", label = "1"];
    "<module>" -> "doIterativeSimulation" [color = "#ab3fb2ff", label = "1"];
    "_find_and_load" -> "_ModuleLockManager.__init__" [color = "#b2b2b2ff", label = "8"];
    "_find_and_load" -> "_ModuleLockManager.__enter__" [color = "#b2b2b2ff", label = "8"];
    "_find_and_load" -> "_find_and_load_unlocked" [color = "#b0b2b2ff", label = "8"];
    "_find_and_load" -> "_ModuleLockManager.__exit__" [color = "#b2b2b2ff", label = "8"];
    "_find_and_load" -> "cb" [color = "#b2b2b2ff", label = "8"];
    "_ModuleLockManager.__enter__" -> "_get_module_lock" [color = "#b2b2b2ff", label = "8"];
    "_ModuleLockManager.__enter__" -> "_ModuleLock.acquire" [color = "#b2b2b2ff", label = "8"];
    "_get_module_lock" -> "_ModuleLock.__init__" [color = "#b2b2b2ff", label = "6"];
    "_find_and_load_unlocked" -> "_find_spec" [color = "#b2b2b2ff", label = "8"];
    "_find_and_load_unlocked" -> "_load_unlocked" [color = "#b1b2b2ff", label = "8"];
    "_find_and_load_unlocked" -> "_call_with_frames_removed" [color = "#b1b2b2ff", label = "2"];
    "_find_spec" -> "_ImportLockContext.__enter__" [color = "#b2b2b2ff", label = "18"];
    "_find_spec" -> "find_spec" [color = "#b2b2b2ff", label = "18"];
    "_find_spec" -> "_ImportLockContext.__exit__" [color = "#b2b2b2ff", label = "18"];
    "find_spec" -> "_get_spec" [color = "#b2b2b2ff", label = "5"];
    "_get_spec" -> "_path_importer_cache" [color = "#b2b2b2ff", label = "13"];
    "_get_spec" -> "FileFinder.find_spec" [color = "#b2b2b2ff", label = "11"];
    "_get_spec" -> "_NamespacePath.__iter__" [color = "#b2b2b2ff", label = "1"];
    "_load_unlocked" -> "module_from_spec" [color = "#b2b2b2ff", label = "6"];
    "_load_unlocked" -> "_installed_safely.__init__" [color = "#b2b2b2ff", label = "6"];
    "_load_unlocked" -> "_installed_safely.__enter__" [color = "#b2b2b2ff", label = "6"];
    "_load_unlocked" -> "SourceFileLoader.exec_module" [color = "#b1b2b2ff", label = "6"];
    "_load_unlocked" -> "_installed_safely.__exit__" [color = "#b2b2b2ff", label = "6"];
    "module_from_spec" -> "SourceFileLoader.create_module" [color = "#b2b2b2ff", label = "5"];
    "module_from_spec" -> "_new_module" [color = "#b2b2b2ff", label = "5"];
    "module_from_spec" -> "_init_module_attrs" [color = "#b2b2b2ff", label = "5"];
    "_init_module_attrs" -> "ModuleSpec.parent" [color = "#b2b2b2ff", label = "5"];
    "_init_module_attrs" -> "ModuleSpec.has_location" [color = "#b2b2b2ff", label = "5"];
    "_init_module_attrs" -> "ModuleSpec.cached" [color = "#b2b2b2ff", label = "10"];
    "SourceFileLoader.exec_module" -> "SourceFileLoader.get_code" [color = "#b2b2b2ff", label = "5"];
    "SourceFileLoader.exec_module" -> "_call_with_frames_removed" [color = "#b1b2b2ff", label = "5"];
    "SourceFileLoader.get_code" -> "SourceFileLoader._check_name_wrapper" [color = "#b2b2b2ff", label = "5"];
    "SourceFileLoader.get_code" -> "cache_from_source" [color = "#b2b2b2ff", label = "5"];
    "SourceFileLoader.get_code" -> "SourceFileLoader.path_stats" [color = "#b2b2b2ff", label = "5"];
    "SourceFileLoader.get_code" -> "SourceFileLoader.get_data" [color = "#b2b2b2ff", label = "5"];
    "SourceFileLoader.get_code" -> "_classify_pyc" [color = "#b2b2b2ff", label = "5"];
    "SourceFileLoader.get_code" -> "_validate_timestamp_pyc" [color = "#b2b2b2ff", label = "5"];
    "SourceFileLoader.get_code" -> "_verbose_message" [color = "#b2b2b2ff", label = "5"];
    "SourceFileLoader.get_code" -> "_compile_bytecode" [color = "#b2b2b2ff", label = "5"];
    "_call_with_frames_removed" -> "numpy.<module>" [color = "#b2b2b2ff", label = "1"];
    "_call_with_frames_removed" -> "_find_and_load" [color = "#b0b2b2ff", label = "3"];
    "_call_with_frames_removed" -> "scipy.linalg.<module>" [color = "#b2b2b2ff", label = "1"];
    "_call_with_frames_removed" -> "numpy.testing._private.<module>" [color = "#b2b2b2ff", label = "1"];
    "_call_with_frames_removed" -> "matplotlib.pyplot.<module>" [color = "#b1b2b2ff", label = "1"];
    "_call_with_frames_removed" -> "mpl_toolkits.mplot3d.<module>" [color = "#b2b2b2ff", label = "1"];
    "_installed_safely.__exit__" -> "<genexpr>" [color = "#b2b2b2ff", label = "20"];
    "_installed_safely.__exit__" -> "_verbose_message" [color = "#b2b2b2ff", label = "5"];
    "_ModuleLockManager.__exit__" -> "_ModuleLock.release" [color = "#b2b2b2ff", label = "8"];
    "_handle_fromlist" -> "_call_with_frames_removed" [color = "#b1b2b2ff", label = "1"];
    "makeSU2Bases" -> "<listcomp>" [color = "#a045b2ff", label = "84"];
    "<listcomp>" -> "kron" [color = "#b2b2b2ff", label = "672"];
    "<listcomp>" -> "trace" [color = "#b2319cff", label = "3472640"];
    "kron" -> "numpy.lib.shape_base._kron_dispatcher" [color = "#b2b2b2ff", label = "672"];
    "kron" -> "numpy.lib.shape_base.kron" [color = "#b2b2b2ff", label = "672"];
    "numpy.lib.shape_base.kron" -> "numpy.core._asarray.asanyarray" [color = "#aeb2b2ff", label = "672"];
    "numpy.lib.shape_base.kron" -> "outer" [color = "#b2b2b2ff", label = "672"];
    "numpy.lib.shape_base.kron" -> "concatenate" [color = "#b2b2b2ff", label = "1344"];
    "numpy.lib.shape_base.kron" -> "numpy.lib.shape_base.get_array_prepare" [color = "#b2b2b2ff", label = "672"];
    "numpy.lib.shape_base.kron" -> "numpy.lib.shape_base.get_array_wrap" [color = "#b2b2b2ff", label = "672"];
    "outer" -> "numpy.core.numeric._outer_dispatcher" [color = "#b2b2b2ff", label = "672"];
    "outer" -> "numpy.core.numeric.outer" [color = "#b2b2b2ff", label = "672"];
    "concatenate" -> "numpy.core.multiarray.concatenate" [color = "#b2b2b2ff", label = "1344"];
    "numpy.lib.shape_base.get_array_prepare" -> "numpy.lib.shape_base.<genexpr>" [color = "#b2b2b2ff", label = "2016"];
    "numpy.lib.shape_base.get_array_wrap" -> "numpy.lib.shape_base.<genexpr>" [color = "#b2b2b2ff", label = "2016"];
    "makeBases" -> "<listcomp>" [color = "#a045b2ff", label = "84"];
    "makeBases" -> "numpy.core.numeric.binary_repr" [color = "#b2b2b2ff", label = "4"];
    "numpy.core.numeric.binary_repr" -> "numpy.core.numeric.warn_if_insufficient" [color = "#b2b2b2ff", label = "3"];
    "makeMMatrix" -> "makeBMatrix" [color = "#b0b2b2ff", label = "1"];
    "makeMMatrix" -> "inv" [color = "#b1b2b2ff", label = "1"];
    "makeMMatrix" -> "<listcomp>" [color = "#a045b2ff", label = "256"];
    "makeBMatrix" -> "trace" [color = "#796ab2ff", label = "65536"];
    "makeBMatrix" -> "warnings.WarningMessage.__init__" [color = "#b2b2b2ff", label = "1"];
    "makeBMatrix" -> "warnings._showwarnmsg" [color = "#b2b2b2ff", label = "1"];
    "trace" -> "numpy.core.fromnumeric._trace_dispatcher" [color = "#7773b2ff", label = "3544960"];
    "trace" -> "numpy.core.fromnumeric.trace" [color = "#8757b2ff", label = "3544960"];
    "numpy.core.fromnumeric.trace" -> "numpy.core._asarray.asanyarray" [color = "#7772b2ff", label = "3544703"];
    "warnings._showwarnmsg" -> "warnings._showwarnmsg_impl" [color = "#b2b2b2ff", label = "1"];
    "warnings._showwarnmsg_impl" -> "warnings._formatwarnmsg" [color = "#b2b2b2ff", label = "1"];
    "warnings._formatwarnmsg" -> "warnings._formatwarnmsg_impl" [color = "#b2b2b2ff", label = "1"];
    "inv" -> "numpy.linalg.linalg._unary_dispatcher" [color = "#b2b2b2ff", label = "6783"];
    "inv" -> "numpy.linalg.linalg.inv" [color = "#b1b2b2ff", label = "6783"];
    "numpy.linalg.linalg.inv" -> "numpy.linalg.linalg._makearray" [color = "#b2b2b2ff", label = "6783"];
    "numpy.linalg.linalg.inv" -> "numpy.linalg.linalg._assertRankAtLeast2" [color = "#b2b2b2ff", label = "6783"];
    "numpy.linalg.linalg.inv" -> "numpy.linalg.linalg._assertNdSquareness" [color = "#b2b2b2ff", label = "6783"];
    "numpy.linalg.linalg.inv" -> "numpy.linalg.linalg._commonType" [color = "#b2b2b2ff", label = "6783"];
    "numpy.linalg.linalg.inv" -> "numpy.linalg.linalg.isComplexType" [color = "#b2b2b2ff", label = "6783"];
    "numpy.linalg.linalg.inv" -> "numpy.linalg.linalg.get_linalg_error_extobj" [color = "#b2b2b2ff", label = "6783"];
    "numpy.linalg.linalg._makearray" -> "numpy.core._asarray.asarray" [color = "#b2b2b2ff", label = "13565"];
    "numpy.linalg.linalg._commonType" -> "numpy.linalg.linalg.isComplexType" [color = "#b2b2b2ff", label = "13565"];
    "numpy.linalg.linalg._commonType" -> "numpy.linalg.linalg._realType" [color = "#b2b2b2ff", label = "13565"];
    "doIterativeSimulation" -> "getExperimentalData" [color = "#b2b2b2ff", label = "1"];
    "doIterativeSimulation" -> "doIterativeAlgorithm" [color = "#ab3fb2ff", label = "1"];
    "doIterativeSimulation" -> "calculateFidelity" [color = "#b2b2b2ff", label = "1"];
    "doIterativeSimulation" -> "_bootlocale.getpreferredencoding" [color = "#b2b2b2ff", label = "2"];
    "doIterativeSimulation" -> "codecs.IncrementalEncoder.__init__" [color = "#b2b2b2ff", label = "2"];
    "getExperimentalData" -> "_bootlocale.getpreferredencoding" [color = "#b2b2b2ff", label = "1"];
    "getExperimentalData" -> "codecs.IncrementalDecoder.__init__" [color = "#b2b2b2ff", label = "1"];
    "getExperimentalData" -> "codecs.IncrementalDecoder.decode" [color = "#b2b2b2ff", label = "2"];
    "codecs.IncrementalDecoder.__init__" -> "codecs.IncrementalDecoder.__init__" [color = "#b2b2b2ff", label = "1"];
    "doIterativeAlgorithm" -> "makeInitialDensityMatrix" [color = "#b2b2b2ff", label = "1"];
    "doIterativeAlgorithm" -> "<listcomp>" [color = "#a144b2ff", label = "33910"];
    "doIterativeAlgorithm" -> "inv" [color = "#b1b2b2ff", label = "6782"];
    "doIterativeAlgorithm" -> "numpy.core.numeric.identity" [color = "#b1b2b2ff", label = "13564"];
    "doIterativeAlgorithm" -> "trace" [color = "#796bb2ff", label = "6782"];
    "doIterativeAlgorithm" -> "eig" [color = "#b1b2b2ff", label = "6782"];
    "doIterativeAlgorithm" -> "real" [color = "#b2b2b2ff", label = "6782"];
    "makeInitialDensityMatrix" -> "<listcomp>" [color = "#a045b2ff", label = "2"];
    "makeInitialDensityMatrix" -> "choleskyDecomposition" [color = "#b2b2b2ff", label = "1"];
    "choleskyDecomposition" -> "real" [color = "#b2b2b2ff", label = "16"];
    "choleskyDecomposition" -> "trace" [color = "#796bb2ff", label = "1"];
    "real" -> "numpy.lib.type_check._real_dispatcher" [color = "#b2b2b2ff", label = "6799"];
    "real" -> "numpy.lib.type_check.real" [color = "#b2b2b2ff", label = "6799"];
    "numpy.core.numeric.identity" -> "_handle_fromlist" [color = "#b2b2b2ff", label = "13564"];
    "numpy.core.numeric.identity" -> "numpy.lib.twodim_base.eye" [color = "#b2b2b2ff", label = "13564"];
    "eig" -> "numpy.linalg.linalg._unary_dispatcher" [color = "#b2b2b2ff", label = "6782"];
    "eig" -> "numpy.linalg.linalg.eig" [color = "#b1b2b2ff", label = "6782"];
    "numpy.linalg.linalg.eig" -> "numpy.linalg.linalg._makearray" [color = "#b2b2b2ff", label = "6782"];
    "numpy.linalg.linalg.eig" -> "numpy.linalg.linalg._assertRankAtLeast2" [color = "#b2b2b2ff", label = "6782"];
    "numpy.linalg.linalg.eig" -> "numpy.linalg.linalg._assertNdSquareness" [color = "#b2b2b2ff", label = "6782"];
    "numpy.linalg.linalg.eig" -> "numpy.linalg.linalg._assertFinite" [color = "#b2b2b2ff", label = "6782"];
    "numpy.linalg.linalg.eig" -> "numpy.linalg.linalg._commonType" [color = "#b2b2b2ff", label = "6782"];
    "numpy.linalg.linalg.eig" -> "numpy.linalg.linalg.get_linalg_error_extobj" [color = "#b2b2b2ff", label = "6782"];
    "numpy.linalg.linalg.eig" -> "numpy.linalg.linalg.isComplexType" [color = "#b2b2b2ff", label = "13564"];
    "numpy.linalg.linalg.eig" -> "numpy.linalg.linalg._complexType" [color = "#b2b2b2ff", label = "6782"];
    "numpy.linalg.linalg._assertFinite" -> "numpy.core._methods._all" [color = "#b2b2b2ff", label = "6782"];
    "calculateFidelity" -> "scipy.linalg._matfuncs_sqrtm.sqrtm" [color = "#b2b2b2ff", label = "3"];
    "calculateFidelity" -> "trace" [color = "#796bb2ff", label = "1"];
    "calculateFidelity" -> "real" [color = "#b2b2b2ff", label = "1"];
    "scipy.linalg._matfuncs_sqrtm.sqrtm" -> "scipy._lib._util._asarray_validated" [color = "#b2b2b2ff", label = "3"];
    "scipy.linalg._matfuncs_sqrtm.sqrtm" -> "isrealobj" [color = "#b2b2b2ff", label = "3"];
    "scipy.linalg._matfuncs_sqrtm.sqrtm" -> "scipy.linalg.decomp_schur.schur" [color = "#b2b2b2ff", label = "3"];
    "scipy.linalg._matfuncs_sqrtm.sqrtm" -> "triu" [color = "#b2b2b2ff", label = "2"];
    "scipy.linalg._matfuncs_sqrtm.sqrtm" -> "array_equal" [color = "#b2b2b2ff", label = "2"];
    "scipy.linalg._matfuncs_sqrtm.sqrtm" -> "scipy.linalg._matfuncs_sqrtm._sqrtm_triu" [color = "#b2b2b2ff", label = "3"];
    "scipy._lib._util._asarray_validated" -> "scipy.sparse.base.isspmatrix" [color = "#b2b2b2ff", label = "3"];
    "scipy._lib._util._asarray_validated" -> "numpy.ma.core.isMaskedArray" [color = "#b2b2b2ff", label = "3"];
    "scipy._lib._util._asarray_validated" -> "numpy.lib.function_base.asarray_chkfinite" [color = "#b2b2b2ff", label = "3"];
    "scipy._lib._util._asarray_validated" -> "numpy.core.numerictypes.issubdtype" [color = "#b2b2b2ff", label = "3"];
    "numpy.lib.function_base.asarray_chkfinite" -> "numpy.core._asarray.asarray" [color = "#b2b2b2ff", label = "6"];
    "numpy.lib.function_base.asarray_chkfinite" -> "numpy.core._methods._all" [color = "#b2b2b2ff", label = "6"];
    "numpy.core.numerictypes.issubdtype" -> "numpy.core.numerictypes.issubclass_" [color = "#b2b2b2ff", label = "6"];
    "isrealobj" -> "numpy.lib.type_check._is_type_dispatcher" [color = "#b2b2b2ff", label = "6"];
    "isrealobj" -> "numpy.lib.type_check.isrealobj" [color = "#b2b2b2ff", label = "6"];
    "numpy.lib.type_check.isrealobj" -> "iscomplexobj" [color = "#b2b2b2ff", label = "3"];
    "scipy.linalg.decomp_schur.schur" -> "numpy.lib.function_base.asarray_chkfinite" [color = "#b2b2b2ff", label = "3"];
    "scipy.linalg.decomp_schur.schur" -> "scipy.linalg.misc._datacopied" [color = "#b2b2b2ff", label = "3"];
    "scipy.linalg.decomp_schur.schur" -> "scipy.linalg.lapack.get_lapack_funcs" [color = "#b2b2b2ff", label = "3"];
    "scipy.linalg.lapack.get_lapack_funcs" -> "scipy.linalg.blas._get_funcs" [color = "#b2b2b2ff", label = "3"];
    "triu" -> "numpy.lib.twodim_base._trilu_dispatcher" [color = "#b2b2b2ff", label = "2"];
    "triu" -> "numpy.lib.twodim_base.triu" [color = "#b2b2b2ff", label = "2"];
    "numpy.lib.twodim_base.triu" -> "numpy.core._asarray.asanyarray" [color = "#aeb2b2ff", label = "2"];
    "numpy.lib.twodim_base.triu" -> "numpy.lib.twodim_base.tri" [color = "#b2b2b2ff", label = "2"];
    "numpy.lib.twodim_base.triu" -> "where" [color = "#b2b2b2ff", label = "2"];
    "array_equal" -> "numpy.core.numeric._array_equal_dispatcher" [color = "#b2b2b2ff", label = "2"];
    "array_equal" -> "numpy.core.numeric.array_equal" [color = "#b2b2b2ff", label = "2"];
    "numpy.core.numeric.array_equal" -> "numpy.core._asarray.asarray" [color = "#b2b2b2ff", label = "6"];
    "numpy.core.numeric.array_equal" -> "numpy.core._methods._all" [color = "#b2b2b2ff", label = "2"];
    "scipy.linalg._matfuncs_sqrtm._sqrtm_triu" -> "diag" [color = "#b2b2b2ff", label = "6"];
    "scipy.linalg._matfuncs_sqrtm._sqrtm_triu" -> "isrealobj" [color = "#b2b2b2ff", label = "3"];
    "scipy.linalg._matfuncs_sqrtm._sqrtm_triu" -> "amin" [color = "#b2b2b2ff", label = "2"];
    "diag" -> "numpy.lib.twodim_base._diag_dispatcher" [color = "#b2b2b2ff", label = "6"];
    "diag" -> "numpy.lib.twodim_base.diag" [color = "#b2b2b2ff", label = "6"];
    "amin" -> "numpy.core.fromnumeric._amin_dispatcher" [color = "#b2b2b2ff", label = "2"];
    "amin" -> "numpy.core.fromnumeric.amin" [color = "#b2b2b2ff", label = "2"];

}